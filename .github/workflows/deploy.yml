# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install
       
      - name: Run Linting (Fail on Errors)
        run: npm run lint

      - name: Run Tests (Fail on Errors)
        run: npm test

      - name: Build Project (Vite)
        run: cd my-app && npx vite build

  docker:
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Logout from Docker Hub (clear cache)
        run: docker logout || true

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t sbuilder06/storybuilder1:latest -f my-app/Dockerfile my-app
          docker tag sbuilder06/storybuilder1:latest sbuilder06/storybuilder1:${{ github.sha }}
          docker tag sbuilder06/storybuilder1:latest sbuilder06/storybuilder1:stable

      - name: Push Docker Image
        run: |
          docker push sbuilder06/storybuilder1:latest
          docker push sbuilder06/storybuilder1:${{ github.sha }}
          docker push sbuilder06/storybuilder1:stable

  deploy:
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: SSH into Server and Deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "Pulling latest Docker image..."
            docker pull sbuilder06/storybuilder1:latest

            echo "Checking if a container already exists..."
            if [ "$(docker ps -a -q -f name=storybuildercontainer)" ]; then
              echo "Stopping and removing existing container..."
              docker stop storybuildercontainer || true
              docker rm storybuildercontainer || true
            fi

            echo "Starting new container..."
            docker run -d --name storybuildercontainer -p 3000:80 --restart unless-stopped sbuilder06/storybuilder1

            echo "Verifying container is running..."
            sleep 5
            if ! docker ps -q -f name=storybuildercontainer; then
              echo "Deployment failed! Rolling back to stable version..."
              docker stop storybuildercontainer || true
              docker rm storybuildercontainer || true
              docker run -d --name storybuildercontainer -p 3000:80 --restart unless-stopped sbuilder06/storybuilder1:stable
            

